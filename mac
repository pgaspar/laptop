#!/usr/bin/env bash

# Welcome to the thoughtbot laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

fancy_echo() {
  printf "\n%b\n" "$1"
}

append_to_dotfile() {
  local dotfile="$1"
  local text="$2"
  local skip_new_line="$3"

  if ! grep -Fqs "$text" "$dotfile"; then
    if (( skip_new_line )); then
      printf "%s\n" "$text" >> "$dotfile"
    else
      printf "\n%s\n" "$text" >> "$dotfile"
    fi
  fi
}

append_to_zshrc() {
  local zshrc

  if [[ -w "$HOME/.zshrc.local" ]]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  append_to_dotfile zshrc "$2" "$3"
}

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [[ ! -d "$HOME/.bin/" ]]; then
  mkdir "$HOME/.bin"
fi

if [[ ! -f "$HOME/.zshrc" ]]; then
  touch "$HOME/.zshrc"
fi

append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

if [[ "$SHELL" != */zsh ]]; then
  fancy_echo "Changing your shell to zsh ..."
    chsh -s $(which zsh)
fi

brew_install_or_upgrade() {
  if brew_is_installed "$1"; then
    if brew_is_upgradable "$1"; then
      brew upgrade "$@"
    fi
  else
    brew install "$@"
  fi
}

brew_is_installed() {
  local name="$(brew_expand_alias "$1")"

  brew list -1 | grep -Fqx "$name"
}

brew_is_upgradable() {
  local name="$(brew_expand_alias "$1")"

  brew outdated --quiet "$name" >/dev/null
  [[ $? -ne 0 ]]
}

brew_expand_alias() {
  brew info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

brew_launchctl_restart() {
  local name="$(brew_expand_alias "$1")"
  local domain="homebrew.mxcl.$name"
  local plist="$domain.plist"

  mkdir -p "$HOME/Library/LaunchAgents"
  ln -sfv "/usr/local/opt/$name/$plist" "$HOME/Library/LaunchAgents"

  if launchctl list | grep -q "$domain"; then
    launchctl unload "$HOME/Library/LaunchAgents/$plist" >/dev/null
  fi
  launchctl load "$HOME/Library/LaunchAgents/$plist" >/dev/null
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew, a good OS X package manager ..."
    ruby <(curl -fsS https://raw.githubusercontent.com/Homebrew/install/master/install)

    append_to_zshrc '# recommended by brew doctor'
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1
    export PATH="/usr/local/bin:$PATH"
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

fancy_echo "Updating Homebrew formulas ..."
brew update

fancy_echo "Installing MySQL..."
  brew_install_or_upgrade 'mysql'

fancy_echo "Installing Redis, a good key-value database ..."
  brew_install_or_upgrade 'redis'

fancy_echo "Installing MongoDB, a document-based database ..."
  brew_install_or_upgrade 'mongodb'

fancy_echo "Installing vim from Homebrew to get the latest version ..."
  brew_install_or_upgrade 'vim'

fancy_echo "Installing Git-flow ..."
  brew_install_or_upgrade 'git-flow'

fancy_echo "Starting MySQL ..."
  brew_launchctl_restart mysql

if [[ ! -d "$HOME/.rbenv" ]]; then
  fancy_echo "Installing rbenv, to change Ruby versions ..."
    git clone https://github.com/sstephenson/rbenv.git "$HOME/.rbenv"

    append_to_zshrc 'export PATH="$HOME/.rbenv/bin:$PATH"'
    append_to_zshrc 'eval "$(rbenv init - zsh --no-rehash)"' 1

    export PATH="$HOME/.rbenv/bin:$PATH"
    eval "$(rbenv init - zsh)"
fi

rehash_path="$HOME/.rbenv/plugins/rbenv-gem-rehash"

if [[ ! -d "$rehash_path" ]]; then
  fancy_echo "Installing rbenv-gem-rehash so the shell automatically picks up binaries after installing gems with binaries..."
    git clone https://github.com/sstephenson/rbenv-gem-rehash.git "$rehash_path"
fi

ruby_build_path="$HOME/.rbenv/plugins/ruby-build"

if [[ -d "$ruby_build_path" ]]; then
  fancy_echo "Updating to latest ruby-build..."
  cd "$ruby_build_path" && git pull && cd -
else
  fancy_echo "Installing ruby-build..."
  git clone https://github.com/sstephenson/ruby-build.git "$ruby_build_path"
fi

fancy_echo "Upgrading and linking OpenSSL ..."
  brew_install_or_upgrade 'openssl'
  brew unlink openssl && brew link openssl --force

ruby_version="$(curl -sSL http://ruby.thoughtbot.com/latest)"

fancy_echo "Installing Ruby $ruby_version ..."
  rbenv install -s "$ruby_version"

fancy_echo "Setting $ruby_version as global default Ruby ..."
  rbenv global "$ruby_version"
  rbenv local "$ruby_version"
  rbenv rehash

fancy_echo "Updating to latest Rubygems version ..."
  gem update --system --no-document

fancy_echo "Stop fetching documentation when installing gems ..."
  append_to_dotfile ".gemrc" "gem: --no-document"

fancy_echo "Installing Bundler to install project-specific Ruby gems ..."
  gem install bundler --no-document

fancy_echo "Configuring Bundler for faster, parallel gem installation ..."
  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))

fancy_echo "Installing Heroku CLI client ..."
  brew_install_or_upgrade 'heroku-toolbelt'

fancy_echo "Installing the heroku-config plugin to pull config variables locally to be used as ENV variables ..."
  heroku plugins:install https://github.com/ddollar/heroku-config.git

fancy_echo "Setting up SSH keys ..."
  if ! [ -e "$HOME/.ssh/id_rsa.pub" ]; then
    echo "Generating ssh key..."
    echo "Please enter the email you want to associate with your ssh key: "
    read email
    ssh-keygen -t rsa -C "$email"
  fi

fancy_echo "Installing your personal additions from ~/.laptop.local ..."
  if [[ -f ~/.laptop.local ]]; then
    source ~/.laptop.local
  fi
